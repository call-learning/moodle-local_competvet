{"version":3,"file":"eval_observation_ask.min.js","sources":["../../../src/local/forms/eval_observation_ask.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript adding a new observation.\n *\n * @module     local_competvet/local/forms/observation_add_form\n * @copyright  2023 Laurent David <laurent@call-learning.fr>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString} from 'core/str';\nimport Notification from 'core/notification';\nimport Ajax from 'core/ajax';\nimport {createModalDebug} from \"./modal_debug\";\nimport {init as modInit} from \"mod_competvet/local/forms/eval_observation_ask\";\nimport {createModalDebugFromEvent} from \"./modal_debug\";\n\nexport const init = (modulename) => {\n    modInit(modulename, createModalDebugFromEvent);\n};\n\nexport const initUsersActionMobileView = (modulename, planningId, studentId, context) => {\n    const selectedElements = document.querySelectorAll('.ask-observation-modal [data-user-id]');\n    if (!selectedElements) {\n        return;\n    }\n    selectedElements.forEach((element) => {\n        element.addEventListener('click', async (event) => {\n            event.preventDefault();\n            const askEvalPayload = {\n                context: context,\n                planningid: planningId,\n                observerid: element.dataset.userId,\n                studentid: studentId,\n            };\n            try {\n                const askObservationReturn = await Ajax.call(\n                    [{methodname: `local_competvet_ask_eval_observation`, args: askEvalPayload}]\n                )[0];\n                if (askObservationReturn.todoid) {\n                    try {\n                        const userInfo = await Ajax.call([\n                            {\n                                methodname: `mod_competvet_get_user_profile`,\n                                args: {\n                                    userid: element.dataset.userId,\n                                },\n                            }\n                        ])[0];\n                        const usernameString = await getString('observation:asked:body', 'mod_competvet', userInfo.fullname);\n                        await createModalDebug({\n                            content: usernameString,\n                            debugs: [\n                                {\n                                    apifunction: 'local_competvet_ask_eval_observation',\n                                    params: JSON.stringify(askEvalPayload),\n                                    results: [\n                                        JSON.stringify(askObservationReturn)\n                                    ]\n                                }\n                            ]\n                        });\n                        element.classList.add('text-success');\n                    } catch (error) {\n                        await Notification.exception(error);\n                    }\n                }\n            } catch (error) {\n                const cannotAddString = await getString('todo:cannotadd', 'mod_competvet');\n                await Notification.exception({message: cannotAddString});\n            }\n        });\n    });\n};"],"names":["modulename","createModalDebugFromEvent","planningId","studentId","context","selectedElements","document","querySelectorAll","forEach","element","addEventListener","async","event","preventDefault","askEvalPayload","planningid","observerid","dataset","userId","studentid","askObservationReturn","Ajax","call","methodname","args","todoid","userInfo","userid","usernameString","fullname","content","debugs","apifunction","params","JSON","stringify","results","classList","add","error","Notification","exception","cannotAddString","message"],"mappings":";;;;;;;2NA8BqBA,4CACTA,WAAYC,4EAGiB,CAACD,WAAYE,WAAYC,UAAWC,iBACnEC,iBAAmBC,SAASC,iBAAiB,yCAC9CF,kBAGLA,iBAAiBG,SAASC,UACtBA,QAAQC,iBAAiB,SAASC,MAAAA,QAC9BC,MAAMC,uBACAC,eAAiB,CACnBV,QAASA,QACTW,WAAYb,WACZc,WAAYP,QAAQQ,QAAQC,OAC5BC,UAAWhB,qBAGLiB,2BAA6BC,cAAKC,KACpC,CAAC,CAACC,kDAAoDC,KAAMV,kBAC9D,MACEM,qBAAqBK,iBAEXC,eAAiBL,cAAKC,KAAK,CAC7B,CACIC,4CACAC,KAAM,CACFG,OAAQlB,QAAQQ,QAAQC,WAGjC,GACGU,qBAAuB,mBAAU,yBAA0B,gBAAiBF,SAASG,gBACrF,iCAAiB,CACnBC,QAASF,eACTG,OAAQ,CACJ,CACIC,YAAa,uCACbC,OAAQC,KAAKC,UAAUrB,gBACvBsB,QAAS,CACLF,KAAKC,UAAUf,2BAK/BX,QAAQ4B,UAAUC,IAAI,gBACxB,MAAOC,aACCC,sBAAaC,UAAUF,QAGvC,MAAOA,aACCG,sBAAwB,mBAAU,iBAAkB,uBACpDF,sBAAaC,UAAU,CAACE,QAASD"}