{"version":3,"file":"eval_observation_add_from_todo.min.js","sources":["../../../src/local/forms/eval_observation_add_from_todo.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript adding a new observation.\n *\n * @module     local_competvet/local/forms/observation_add_form\n * @copyright  2023 Laurent David <laurent@call-learning.fr>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Ajax from 'core/ajax';\nimport ModalEvents from 'core/modal_events';\nimport {genericFormCreate, getSelectedElement} from \"mod_competvet/local/forms/generic_form_helper\";\nimport {createModalDebug, createModalDebugFromEvent} from \"./modal_debug\";\nimport {get_string as getString} from 'core/str';\nimport Notification from 'core/notification';\n\nexport const init = async (modulename) => {\n    const selectedElements = getSelectedElement('addfromtodo');\n    if (!selectedElements) {\n        return;\n    }\n    selectedElements.forEach((element) => {\n        element.addEventListener('click', async (event) => {\n            event.preventDefault();\n            const data = event.target.closest('[data-action]').dataset;\n            const payLoad = {\n                category: 1, // Observation.\n                planningid: data.planningId,\n                studentid: data.studentId,\n                observerid: data.observerId,\n                context: data.context,\n            };\n            const observation = await Ajax.call([\n                {\n                    methodname: `local_competvet_create_eval_observation`,\n                    args: payLoad,\n                }\n            ])[0];\n            const modalObs = await createModalDebug({\n                content: await getString('observation:created', 'local_competvet'),\n                debugs: [\n                    {\n                        apifunction: 'local_competvet_create_eval_observation',\n                        params: JSON.stringify(payLoad),\n                        results: [\n                            JSON.stringify(observation)\n                        ]\n                    }\n                ]\n            });\n            modalObs.show();\n            // Replace :OBSERVATIONID by the real observation id in the return url..\n            const returnUrl = data.returnurl.replace('OBSERVATIONID', observation.observationid);\n            modalObs.getRoot().on(ModalEvents.cancel, () => processTodo(\n                data.todoId,\n                {id: observation.observationid, returnurl: returnUrl},\n                modulename\n            ));\n        });\n    });\n};\n\nconst processTodo = async (todoId, editObservationParameters, modulename) => {\n    const payLoad = {\n        id: todoId,\n    };\n    try {\n        const updatedTodo = await Ajax.call([\n            {\n                methodname: `local_competvet_update_todo_status`,\n                args: payLoad,\n            }\n        ])[0];\n        const modalTodo = await createModalDebug({\n            content: await getString('todo:updated', 'local_competvet'),\n            debugs: [\n                {\n                    apifunction: 'local_competvet_update_todo',\n                    params: JSON.stringify(payLoad),\n                    results: [\n                        JSON.stringify(updatedTodo)\n                    ]\n                }\n            ]\n        });\n        modalTodo.show();\n        modalTodo.getRoot().on(ModalEvents.cancel, () => {\n            genericFormCreate(editObservationParameters, 'edit', modulename, createModalDebugFromEvent);\n        });\n    } catch (error) {\n        await Notification.exception(error);\n    }\n};\n"],"names":["async","selectedElements","forEach","element","addEventListener","event","preventDefault","data","target","closest","dataset","payLoad","category","planningid","planningId","studentid","studentId","observerid","observerId","context","observation","Ajax","call","methodname","args","modalObs","content","debugs","apifunction","params","JSON","stringify","results","show","returnUrl","returnurl","replace","observationid","getRoot","on","ModalEvents","cancel","processTodo","todoId","id","modulename","editObservationParameters","updatedTodo","modalTodo","createModalDebugFromEvent","error","Notification","exception"],"mappings":";;;;;;;4OA6BoBA,MAAAA,mBACVC,kBAAmB,2CAAmB,eACvCA,kBAGLA,iBAAiBC,SAASC,UACtBA,QAAQC,iBAAiB,SAASJ,MAAAA,QAC9BK,MAAMC,uBACAC,KAAOF,MAAMG,OAAOC,QAAQ,iBAAiBC,QAC7CC,QAAU,CACZC,SAAU,EACVC,WAAYN,KAAKO,WACjBC,UAAWR,KAAKS,UAChBC,WAAYV,KAAKW,WACjBC,QAASZ,KAAKY,SAEZC,kBAAoBC,cAAKC,KAAK,CAChC,CACIC,qDACAC,KAAMb,WAEX,GACGc,eAAiB,iCAAiB,CACpCC,cAAe,mBAAU,sBAAuB,mBAChDC,OAAQ,CACJ,CACIC,YAAa,0CACbC,OAAQC,KAAKC,UAAUpB,SACvBqB,QAAS,CACLF,KAAKC,UAAUX,kBAK/BK,SAASQ,aAEHC,UAAY3B,KAAK4B,UAAUC,QAAQ,gBAAiBhB,YAAYiB,eACtEZ,SAASa,UAAUC,GAAGC,sBAAYC,QAAQ,IAAMC,YAC5CnC,KAAKoC,OACL,CAACC,GAAIxB,YAAYiB,cAAeF,UAAWD,WAC3CW,2BAMVH,YAAc1C,MAAO2C,OAAQG,0BAA2BD,oBACpDlC,QAAU,CACZiC,GAAID,kBAGEI,kBAAoB1B,cAAKC,KAAK,CAChC,CACIC,gDACAC,KAAMb,WAEX,GACGqC,gBAAkB,iCAAiB,CACrCtB,cAAe,mBAAU,eAAgB,mBACzCC,OAAQ,CACJ,CACIC,YAAa,8BACbC,OAAQC,KAAKC,UAAUpB,SACvBqB,QAAS,CACLF,KAAKC,UAAUgB,kBAK/BC,UAAUf,OACVe,UAAUV,UAAUC,GAAGC,sBAAYC,QAAQ,gDACrBK,0BAA2B,OAAQD,WAAYI,2CAEvE,MAAOC,aACCC,sBAAaC,UAAUF"}