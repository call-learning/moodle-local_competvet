{"version":3,"file":"modal_debug.min.js","sources":["../../../src/local/forms/modal_debug.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript adding a new observation.\n *\n * @module     local_competvet/local/forms/observation_add_form\n * @copyright  2023 Laurent David <laurent@call-learning.fr>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Notification from 'core/notification';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Template from \"core/templates\";\nimport {get_string as getString} from 'core/str';\n\n/**\n * Create Modal debug dialog\n *\n * @param {Object} data\n * @return {Promise<void>}\n */\nexport const createModalDebug = async (data) => {\n    try {\n        const modal = await ModalFactory.create({\n            title: data.title,\n            body: Template.render('local_competvet/modal_debug', {\n                'content': data.content,\n                'debugs': data.debugs\n            }),\n            type: ModalFactory.types.CANCEL,\n            large: true,\n        });\n        modal.setButtonText('cancel', await getString('ok'));\n        modal.show();\n        modal.getRoot().on(ModalEvents.hidden, () => {\n            if (data.returnurl) {\n                window.location.assign(data.returnurl);\n            }\n        });\n        return modal;\n    } catch (error) {\n        await Notification.exception(error);\n    }\n};\n\n/**\n * Create Modal debug dialog from event\n *\n * @param {Object} event\n * @return {Promise<void>}\n */\nexport const createModalDebugFromEvent = async(event) => {\n    const data = {...event.detail};\n    await createModalDebug(data);\n};\n"],"names":["createModalDebug","async","modal","ModalFactory","create","title","data","body","Template","render","content","debugs","type","types","CANCEL","large","setButtonText","show","getRoot","on","ModalEvents","hidden","returnurl","window","location","assign","error","Notification","exception","event","detail"],"mappings":";;;;;;;mVAmCaA,iBAAmBC,MAAAA,iBAElBC,YAAcC,uBAAaC,OAAO,CACpCC,MAAOC,KAAKD,MACZE,KAAMC,mBAASC,OAAO,8BAA+B,SACtCH,KAAKI,eACNJ,KAAKK,SAEnBC,KAAMT,uBAAaU,MAAMC,OACzBC,OAAO,WAEXb,MAAMc,cAAc,eAAgB,mBAAU,OAC9Cd,MAAMe,OACNf,MAAMgB,UAAUC,GAAGC,sBAAYC,QAAQ,KAC/Bf,KAAKgB,WACLC,OAAOC,SAASC,OAAOnB,KAAKgB,cAG7BpB,MACT,MAAOwB,aACCC,sBAAaC,UAAUF,uFAUIzB,MAAAA,cAC/BK,KAAO,IAAIuB,MAAMC,cACjB9B,iBAAiBM"}